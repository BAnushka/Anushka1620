#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

// Merge two subarrays of arr[]
void merge(int arr[], int left, int middle, int right) {
    int i, j, k;
    int n1 = middle - left + 1;
    int n2 = right - middle;

    // Create temporary arrays
    int L[n1], R[n2];

    // Copy data to temporary arrays
    for (i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[middle + 1 + j];

    // Merge the temporary arrays back into arr[l..r]
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = left; // Initial index of merged subarray

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if there are any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if there are any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Merge sort function
void mergeSort(int arr[], int left, int right) {
    if (left >= right)
        return;

    int middle = left + (right - left) / 2;
    mergeSort(arr, left, middle);
    mergeSort(arr, middle + 1, right);
    merge(arr, left, middle, right);
}

// Binary search function
int binarySearch(int arr[], int left, int right, int key) {
    if (left <= right) {
        int middle = left + (right - left) / 2;

        if (arr[middle] == key)
            return middle;
        if (arr[middle] > key)
            return binarySearch(arr, left, middle - 1, key);
        return binarySearch(arr, middle + 1, right, key);
    }
    return -1; // Key not found
}

int main() {
    const int size = 5000;
    int randArray[size];

    // Generate random numbers between 1 and 10000
    srand(time(0));
    for (int i = 0; i < size; i++)
        randArray[i] = 1 + rand() % 10000;

    cout << "The unsorted array: ";
    for (int i = 0; i < size; i++)
        cout << randArray[i] << " ";

    // Perform Merge Sort on the array
    mergeSort(randArray, 0, size - 1);

    cout << "\n\nThe sorted array: ";
    for (int i = 0; i < size; i++)
        cout << randArray[i] << " ";

    // Ask the user for the key element to search
    int key;
    cout << "\n\nEnter the element to be searched: ";
    cin >> key;

    // Perform binary search on the sorted array
    int result = binarySearch(randArray, 0, size - 1, key);
    if (result != -1)
        cout << "The element " << key << " is found at index " << result << endl;
    else
        cout << "The element " << key << " is not found in the array." << endl;

    return 0;
}
